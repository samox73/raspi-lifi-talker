import sys
import serial as pyserial
import time
from serial.tools import list_ports  # this may return differently named strings on different
# platforms, make sure to set verbose=True in method detect_port to debug errors

"""
- Make sure all Tx are connected to an Rx!
- If not connected, the timeout specified upon the initialization of the pyserial.serial object will  
"""


class SerialConnector:
    def __init__(self, _port=""):
        self.port = _port
        self.serial_con = None

    def detect_port(self, verbose=True):
        # configure the serial connections (the parameters differs on the device you are connecting to)
        ports_list = []  # list of ports of all ttl232 capable devices
        connection_log = ""  # a string for writing to a CLI/GUI-log
        com_ports = list(list_ports.comports())
        for port_no, description, address in com_ports:
            if verbose:
                connection_log += "port_no:\t%s\n" % port_no
                connection_log += "description:\t%s\n" % description
                connection_log += "address:\t%s\n" % address
            # if '232' in description:
            # if 'Product' in description:
            #     ports_list.append(port_no)
            ports_list.append(port_no)
        if verbose:
            connection_log += "Found the following com-ports: %s\n" % ports_list
        if len(ports_list) == 0:
            print('no suitable serial port (fr: pas de port série convenable)')
        else:
            connection_log += "Selecting port %s" % ports_list[0]
            self.port = ports_list[0]
        return connection_log

    def get_port(self):
        return self.port

    def set_port(self, _port):
        self.port = _port
        return

    def close_connection(self):
        if self.serial_con is not None:
            if self.serial_con.is_open:
                self.serial_con.close()
        return

    def establish_connection(self, _baudrate=9600):
        self.serial_con = pyserial.Serial(
            port=self.port,
            baudrate=_baudrate,
            parity=pyserial.PARITY_NONE,
            stopbits=pyserial.STOPBITS_ONE,
            bytesize=pyserial.EIGHTBITS,
            timeout=5
        )
        return


class SerialSender(SerialConnector):

    def __init__(self):
        super().__init__()

    def send_msg(self, _msg):
        if self.serial_con is None:
            print("serial_con is 'None'. Open a serial connection first!")
            return
        if self.serial_con.is_open:
            try:
                print("sending message '%s'" % _msg)
                self.serial_con.flushInput()  # flush input buffer, discarding all its contents
                self.serial_con.flushOutput()  # flush output buffer, aborting current output 
                # and discard all that is in buffer

                self.serial_con.write(_msg)
                self.serial_con.flush()
            except IOError:
                print('error communicating...')
        else:
            print('cannot open serial port')
        return

    def read_line(self, _eol_character=b'\n', _timeout=1):
        buffer = ""
        timer = time.time()
        while True and (time.time() - timer) < _timeout:
            one_byte = self.serial_con.read(1)
            if one_byte == _eol_character:
                return buffer.encode('utf-8')
            else:
                buffer += str(one_byte, "utf-8", errors='replace')
        # raise TimeoutError("Timed out while read_line(), make sure there is an EOF!")
        print("TIMEOUT INSIDE SERIAL RECEIVER!")
        return


class SerialReceiver(SerialConnector):

    def __init__(self):
        super().__init__()

    def read_line(self, _eol_character=b'\n', _timeout=1):
        buffer = ""
        timer = time.time()
        while True and (time.time() - timer) < _timeout:
            one_byte = self.serial_con.read(1)
            if one_byte == _eol_character:
                return buffer.encode('utf-8')
            else:
                buffer += str(one_byte, "utf-8", errors='replace')
        # raise TimeoutError("Timed out while read_line(), make sure there is an EOF!")
        print("TIMEOUT INSIDE SERIAL RECEIVER!")
        return


# %% ~~~~~~~~~~~~~~ opening serial port ~~~~~~~~~~~~~~
#
# com_port = detect_port(verbose=True)
#
# ser = pyserial.Serial(
#     port=com_port,
#     baudrate=9600,
#     parity=pyserial.PARITY_NONE,
#     stopbits=pyserial.STOPBITS_ONE,
#     bytesize=pyserial.EIGHTBITS,
#     timeout=2
# )
#
# #%% ~~~~~~~~~~~~~~ testing the connection ~~~~~~~~~~~~~~
# # test_ttl232rg(b'success!\n', ser)
# send_msg(ser, b'hello this is samuel recker\n')
#
# # %%
# cde_base = [0x51, 0x53, 0x54, 0x0D, 0x0A]  # baud rate 9600 bauds
# # EtatFeux = 0
#
#
# # %%
#
# while True:  # Event Loop
#     event, values = window.Read()
#     print(event, values)
#     # print(values['_SLIDER_'])
#     window.Element('_OUTPUT_').Update(event)
#     if event is None or event == 'Exit':
#         ser.close()
#         break
#     else:
#         if event == 'Baud Rate':
#             # change the "output" element to be the value of "input" element
#             window.Element('_OUTPUT_').Update('Baud rate set')
#             cde_base[0] = 0x42
#             cde_base[1] = 0x00
#             cde_base[2] = int(values['_INBR_'])
#             cde_base[3] = 0x0D
#         if event == 'Led Power':
#             # change the "output" element to be the value of "input" element
#             window.Element('_OUTPUT_').Update('Led power set')
#             cde_base[0] = 0x52
#             cde_base[1] = int(values['_INPWR_'])
#             cde_base[2] = 0x00
#             cde_base[3] = 0x0D
#         if event == 'Set CVref':
#             # change the "output" element to be the value of "input" element
#             window.Element('_OUTPUT_').Update('CVref set')
#             cde_base[0] = 0x43
#             cde_base[1] = int(values['_SLIDERC_'])
#             cde_base[2] = 0x00
#             cde_base[3] = 0x0D
#         print(cde_base)
#         send_msg(ser, cde_base)
#
# window.Close()
